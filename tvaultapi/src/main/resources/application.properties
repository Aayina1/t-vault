vault.api.url=http://localhost:8200/v1
server.contextPath=/vault
vault.port=8200
vault.auth.method=oidc

vault.secret.key.whitelistedchars=[a-z0-9_]+
vault.approle.name.whitelistedchars=[a-z0-9_]+
vault.sdb.name.whitelistedchars=[a-z0-9_-]+

ldap.url=	
ldap.base:	
ldap.userdn:	
ldap.username:	
ldap.password:	
ad.url=	
ad.base:	
ad.userdn:	
ad.username:	
ad.password:	
ad.svc.acc.suffix=
ad.managerbase:

safe.quota=20

ad.passwordrotation.enable=true
selfservice.enable=true

selfservice.username=c2FmZWFkbWlu
selfservice.password=c2FmZWFkbWlu
selfservice.tokengenerator=approle
selfservice.ssfilelocation=/opt/tvault/hcorp

spring.mail.host=email.smtp
spring.mail.port=123
workload.endpoint=	
workload.endpoint.token=

nclm.endpoint=
nclm.endpoint.token=
nclm.container.id=29

ad.notification.fromemail=
ssl.notification.fromemail=noreply@t-mobile.com
ad.notification.mail.subject=Onboarding Service account %s is successful
ad.notification.mail.body.groupcontent=The group Cloud Support created for you is %s and you can add it to your service account by:
ad.notification.mail.template.mode=HTML5

SafesController.getFolders.value=To get list of folders of a Safe
SafesController.getFolders.notes=To get list of folders of a Safe

SafesController.deleteGroupFromSafe.value=To remove a group from safe
SafesController.deleteGroupFromSafe.notes=To remove a group from safe

SafesController.getInfo.value=To get sdb information
SafesController.getInfo.notes=To get sdb information

SafesController.createSafe.value=To create Safe and associate basic policies
SafesController.createSafe.notes=This creates Safe

SafesController.updateSafe.value=To update Safe and its associated users, groups, roles
SafesController.updateSafe.notes=This updates Safe and its associated users, groups, roles

SafesController.deleteSafe.value=To delete Safe and its associated users, groups, roles
SafesController.deleteSafe.notes=This deletes Safe

SafesController.addUserToSafe.value=To add a user to Safe
SafesController.addUserToSafe.notes=This adds a user to Safe

SafesController.removeUserFromSafe.value=To remove a user from Safe
SafesController.removeUserFromSafe.notes=This removes a user from Safe

SafesController.addGroupToSafe.value=To add a group to Safe
SafesController.addGroupToSafe.notes=This adds a group to Safe

SafesController.removeGroupFromSafe.value=To remove a group from Safe
SafesController.removeGroupFromSafe.notes=This removes a group from Safe

SafesController.getSafe.value=To get list of Safes
SafesController.getSafe.notes=This gets the list of Safes

VaultAuthControllerV2.login.value=To login to TVault
VaultAuthControllerV2.login.notes=To login to TVault using an authentication method set in application.properties file

VaultAuthControllerV2.renew.value=To renew a user token
VaultAuthControllerV2.renew.notes=To renew a user token before the expiry

VaultAuthControllerV2.lookup.value=To lookup a user token
VaultAuthControllerV2.lookup.notes=To lookup a details for given user token

VaultAuthControllerV2.revoke.value=To revoke a token
VaultAuthControllerV2.revoke.notes=To revoke the access for a given token

UserPassControllerV2.createUser.value=To create user
UserPassControllerV2.createUser.notes=To create user for use with username/password authentication

UserPassControllerV2.readUser.value=To read user
UserPassControllerV2.readUser.notes=To get user details for a user from username/password authentication

UserPassControllerV2.deleteUser.value=To delete user
UserPassControllerV2.deleteUser.notes=To delete user from username/password authentication

UserPassControllerV2.updatePassword.value=To update user (password)
UserPassControllerV2.updatePassword.notes=To update user (password) for user with username/password authentication

UserPassControllerV2.listUsers.value=To get list of users
UserPassControllerV2.listUsers.notes=To get list of users from username/password authentication

UserPassControllerV2.login.value=To login using userpass authentication
UserPassControllerV2.login.notes=To login a user using username/password with userpass authentication

SysControllerV2.checkVaultHealth.value=To get Vault health
SysControllerV2.checkVaultHealth.notes=To get Vault health

SysControllerV2.unseal.value=To unseal vault
SysControllerV2.unseal.notes=To get Vault health

SysControllerV2.unsealProgress.value=To get unseal progress
SysControllerV2.unsealProgress.notes=To get unseal progress status


AppRoleControllerV2.createAppRole.value=To Create AppRole
AppRoleControllerV2.createAppRole.notes=To Create AppRole

AppRoleControllerV2.associateApprole.value=To associate an AppRole to a Safe
AppRoleControllerV2.associateApprole.notes=To associate an AppRole to a Safe

AppRoleControllerV2.readAppRole.value=To read AppRole
AppRoleControllerV2.readAppRole.notes=To read AppRole

AppRoleControllerV2.listAppRoles.value=To list AppRoles
AppRoleControllerV2.listAppRoles.notes=To list AppRoles

AppRoleControllerV2.readAppRoleRoleId.value=To read AppRole role_id
AppRoleControllerV2.readAppRoleRoleId.notes=To read AppRole role_id

AppRoleControllerV2.deleteAppRole.value=To delete AppRole
AppRoleControllerV2.deleteAppRole.notes=To delete AppRole

AppRoleControllerV2.createsecretId.value=To create secret_id for AppRole
AppRoleControllerV2.createsecretId.notes=To create secret_id for AppRole

AppRoleControllerV2.deleteSecretId.value=To delete secret_id for AppRole
AppRoleControllerV2.deleteSecretId.notes=To delete secret_id for AppRole

AppRoleControllerV2.readSecretId.value=To read AppRole secret_id
AppRoleControllerV2.readSecretId.notes=To read AppRole secret_id

AppRoleControllerV2.login.value=To Login with AppRole using role_id and secret_id
AppRoleControllerV2.login.notes=To Login with AppRole using role_id and secret_id

AccessControllerV2.createPolicy.value=To create policy
AccessControllerV2.createPolicy.notes=To create policy

AccessControllerV2.updatePolicy.value=To update policy
AccessControllerV2.updatePolicy.notes=To update policy

AccessControllerV2.listAllPolices.value=To list all existing policies
AccessControllerV2.listAllPolices.notes=To list all existing policies

AccessControllerV2.getPolicyInfo.value=To get details of a policy
AccessControllerV2.getPolicyInfo.notes=To get details of a policy

AccessControllerV2.deletePolicyInfo.value=To delete a policy
AccessControllerV2.deletePolicyInfo.notes=To delete a policy

AWSAuthControllerV2.authenticateEC2.value=To login/fetch client token using aws ec2 pkcs7 document
AWSAuthControllerV2.authenticateEC2.notes=To login/fetch client token using aws ec2 pkcs7 document

AWSAuthControllerV2.createRole.value=To create an aws app role
AWSAuthControllerV2.createRole.notes=To create an aws app role

AWSAuthControllerV2.updateRole.value=To update an aws app role
AWSAuthControllerV2.updateRole.notes=To update an aws app role

AWSAuthControllerV2.deleteRole.value=To delete an existing role
AWSAuthControllerV2.deleteRole.notes=To delete an existing role

AWSAuthControllerV2.fetchRole.value=To fetch information for an aws approle
AWSAuthControllerV2.fetchRole.notes=To fetch information for an aws approle

AWSAuthControllerV2.listRoles.value=To get list of AWS roles
AWSAuthControllerV2.listRoles.notes=To get list of AWS roles


LDAPAuthControllerV2.authenticateLdap.value=To authenticate against LDAP
LDAPAuthControllerV2.authenticateLdap.notes=To authenticate against LDAP

LDAPAuthControllerV2.configureLdapGroup.value=To configure a LDAP group in vault
LDAPAuthControllerV2.configureLdapGroup.notes=To configure a LDAP group in vault

LDAPAuthControllerV2.listLdapGroups.value=To get all existing LDAP Groups configured in Vault
LDAPAuthControllerV2.listLdapGroups.notes=To get all existing LDAP Groups configured in Vault

LDAPAuthControllerV2.fetchLdapGroup.value=To retrieve LDAP groups
LDAPAuthControllerV2.fetchLdapGroup.notes=To retrieve LDAP groups

LDAPAuthControllerV2.deleteLdapGroup.value=To delete LDAP group
LDAPAuthControllerV2.deleteLdapGroup.notes=To delete LDAP group

LDAPAuthControllerV2.configureLdapUser.value=To configure a LDAP user
LDAPAuthControllerV2.configureLdapUser.notes=To configure a LDAP user

LDAPAuthControllerV2.listLdapUsers.value=To list all configured LDAP Users
LDAPAuthControllerV2.listLdapUsers.notes=To list all configured LDAP Users

LDAPAuthControllerV2.fetchLdapUser.value=To get the details of LDAP User configured in vault
LDAPAuthControllerV2.fetchLdapUser.notes=To get the details of LDAP User configured in vault

LDAPAuthControllerV2.deleteLdapUser.value=To delete a LDAP User
LDAPAuthControllerV2.deleteLdapUser.notes=To delete a LDAP User

SecretControllerV2.readFromVault.value=To read secret from vault
SecretControllerV2.readFromVault.notes=To read secret from vault

SecretControllerV2.write.value=To write secret into vault
SecretControllerV2.write.notes=<b>Secret Key: </b>The allowed characters for secret key(s) are alphabets, numbers and underscores only. <br>\
<b>Secret Value: </b>Generally, single line text will be accpeted as the secret value.\
If you want to input the secret values with multiple text, then the secret value has to be combined into a single line using appropriate techniques/tools. \
If the secret value contains any JSON unsafe characters such as newlines, backslashs, single quotes, double quotes, then the secret has to be JSON escaped before writing into vault.<br>\
<b>Sample Input JSON: </b>{"path":"shared/mysafe01/myfolder","data":{"secret1":"value1","secret2":"value2"}}

SecretControllerV2.deleteFromVault.value=To delete secret from vault
SecretControllerV2.deleteFromVault.notes=To delete secret from vault

SecretControllerV2.readFromVaultRecursive.value=To read all folders and secrets 
SecretControllerV2.readFromVaultRecursive.notes=To read all folders and secrets 

SecretControllerV2.readFoldersAndSecrets.value=To read folders and secrets for a given folder
SecretControllerV2.readFoldersAndSecrets.notes=To read folders and secrets for a given folder

DirectoryServiceControllerV2.searchByUPN.value=Search for user(s) by User Principal Name
DirectoryServiceControllerV2.searchByUPN.notes=Search for user(s) by User Principal Name

DirectoryServiceControllerV2.searchByCorpId.value=Search for user(s) by CorpId
DirectoryServiceControllerV2.searchByCorpId.notes=Search for user(s) by CorpId

DirectoryServiceControllerV2.searchByGroup.value=Search for group(s) by group name
DirectoryServiceControllerV2.searchByGroup.notes=Search for group(s) by group name

AWSIAMAuthControllerV2.configureClient.value=To configure the credentials required to perform API calls to AWS
AWSIAMAuthControllerV2.configureClient.notes=To configure the credentials required to perform API calls to AWS

AWSIAMAuthControllerV2.readClientConfiguration.value=To return the previously configured AWS access credentials
AWSIAMAuthControllerV2.readClientConfiguration.notes=To return the previously configured AWS access credentials

AWSIAMAuthControllerV2.createStsRole.value=To allow explicit association of STS roles to satellite AWS accounts
AWSIAMAuthControllerV2.createStsRole.notes=To allow explicit association of STS roles to satellite AWS accounts

AWSIAMAuthControllerV2.createIamRole.value=To register am IAM role with Vault
AWSIAMAuthControllerV2.createIamRole.notes=To register am IAM role with Vault

AWSIAMAuthControllerV2.fetchRole.value=To return a previously registered role configuration
AWSIAMAuthControllerV2.fetchRole.notes=To return a previously registered role configuration

AWSIAMAuthControllerV2.listRoles.value=To list Roles all the roles that are registered
AWSIAMAuthControllerV2.listRoles.notes=To list Roles all the roles that are registered

AWSIAMAuthControllerV2.deleteRole.value=To deletes the previously registered role
AWSIAMAuthControllerV2.deleteRole.notes=To deletes the previously registered role

AWSIAMAuthControllerV2.authenticateIAM.value=To login/fetch a client token using AWS IAM authentication 
AWSIAMAuthControllerV2.authenticateIAM.notes=To login/fetch a client token using AWS IAM authentication

SafesController.addAWSRoleToSafe.value=To add AWS role to a Safe
SafesController.addAWSRoleToSafe.notes=To add AWS role to a Safe

SafesController.addAWSIAMRoleToSafe.value=To add AWS IAM role to safe
SafesController.addAWSIAMRoleToSafe.notes=To add AWS IAM role to safe

AWSIAMAuthControllerV2.removeIamRole.value=To remove IAM role from Safe 
AWSIAMAuthControllerV2.removeIamRole.notes=To remove IAM role from Safe 

AWSIAMAuthControllerV2.updateRole.value=To update an IAM role
AWSIAMAuthControllerV2.updateRole.notes=To update an IAM role

SafesController.deleteAWSRoleFromSafe.value=Delete AWS role from SDB
SafesController.deleteAWSRoleFromSafe.notes=Delete AWS role from SDB

AWSIAMAuthControllerV2.authenticateAWS.value=Authenticate using AWS methods EC2/IAM
AWSIAMAuthControllerV2.authenticateAWS.notes=Authenticate using AWS methods EC2/IAM

SafesController.deleteAWSPermissionFromSafe.value=Delete AWS permission from SDB
SafesController.deleteAWSPermissionFromSafe.notes=Delete AWS permission from SDB

SelfSupportController.deleteGroupFromSafe.value=To remove a group from safe
SelfSupportController.deleteGroupFromSafe.notes=To remove a group from safe

SelfSupportController.addGroupToSafe.value=To add a group to Safe
SelfSupportController.addGroupToSafe.notes=This adds a group to Safe

SelfSupportController.deleteSafe.value=To delete Safe and its associated users, groups, roles
SelfSupportController.deleteSafe.notes=This deletes Safe

SelfSupportController.updateSafe.value=To update Safe and its associated users, groups, roles
SelfSupportController.updateSafe.notes=This updates Safe and its associated users, groups, roles

SelfSupportController.addAWSRoleToSafe.value=To add AWS role to a Safe
SelfSupportController.addAWSRoleToSafe.notes=To add AWS role to a Safe

SelfSupportController.deleteAWSRoleFromSafe.value=Delete AWS role from SDB
SelfSupportController.deleteAWSRoleFromSafe.notes=Delete AWS role from SDB

SelfSupportController.deleteAWSPermissionFromSafe.value=Delete AWS permission from SDB
SelfSupportController.deleteAWSPermissionFromSafe.notes=Delete AWS permission from SDB

SelfSupportController.associateApprole.value=To associate an AppRole to a Safe
SelfSupportController.associateApprole.notes=To associate an AppRole to a Safe

SelfSupportController.deleteApproleFromSafe.value=To delete an AppRole from a Safe
SelfSupportController.deleteApproleFromSafe.notes=To delete an AppRole from a Safe

SelfSupportController.createRole.value=To create an aws app role
SelfSupportController.createRole.notes=To create an aws app role

SelfSupportController.createIamRole.value=To register am IAM role with Vault
SelfSupportController.createIamRole.notes=To register am IAM role with Vault

SelfSupportController.updateRole.value=To update an aws app role
SelfSupportController.updateRole.notes=To update an aws app role

SelfSupportController.updateIAMRole.value=To update an aws app role
SelfSupportController.updateIAMRole.notes=To update an aws app role

SelfSupportController.authorized.value=To check if the user has permission on the path
SelfSupportController.authorized.notes=To check if the user has permission on the path

SelfSupportController.getInfoAsPowerUser.value=To get safe info
SelfSupportController.getInfoAsPowerUser.notes=To get safe info

SelfSupportController.createSafe.value=To create Safe and associate basic policies
SelfSupportController.createSafe.notes=This creates Safe

SelfSupportController.getFolders.value=To get list of folders of a Safe
SelfSupportController.getFolders.notes=To get list of folders of a Safe

SelfSupportController.addUserToSafe.value=To add a user to Safe
SelfSupportController.addUserToSafe.notes=This add a user to the safe

SelfSupportController.removeUserFromSafe.value=To remove a user from Safe
SelfSupportController.removeUserFromSafe.notes=This removes a user from Safe

SelfSupportController.getSafeAsPowerUser.value=To get list of Safes
SelfSupportController.getSafeAsPowerUser.notes=This gets the list of Safes

AppRoleControllerV3.createAppRole.value=To Create AppRole
AppRoleControllerV3.createAppRole.notes=To Create AppRole

AppRoleControllerV3.deleteAppRole.value=To delete AppRole
AppRoleControllerV3.deleteAppRole.notes=To delete AppRole

SelfSupportController.getsafes.value=To get list of safes having read/write permission
SelfSupportController.getsafes.notes=To get list of safes having read/write permission

SelfSupportController.deleteSecretIds.value=To delete secret_ids associated with an AppRole
SelfSupportController.deleteSecretIds.notes=To delete secret_ids associated with an AppRole

SelfSupportController.readAppRoleRoleId.value=To read AppRole role_id for an AppRole
SelfSupportController.readAppRoleRoleId.notes=To read AppRole role_id for an AppRole

SelfSupportController.readAppRoleSecretId.value=To read AppRole secret_id for an AppRole
SelfSupportController.readAppRoleSecretId.notes=To read AppRole secret_id for an AppRole

SelfSupportController.readAppRoleDetails.value=To read all the information of an AppRole including its metadata, role_id, accessor_ids
SelfSupportController.readAppRoleDetails.notes=To read all the information of an AppRole including its metadata, role_id, accessor_ids

SelfSupportController.readAppRole.value=To read basic information of an AppRole
SelfSupportController.readAppRole.notes=To read basic information of an AppRole

SelfSupportController.readAccessorsOfSecretIds.value=To get list of accessors of all the secret_ids issued against the AppRole
SelfSupportController.readAccessorsOfSecretIds.notes=To get list of accessors of all the secret_ids issued against the AppRole

SelfSupportController.listAppRoles.value=To list AppRoles
SelfSupportController.listAppRoles.notes=To list AppRoles

SelfSupportController.updateAppRole.value=To update an existing AppRole
SelfSupportController.updateAppRole.notes=To update an existing AppRole

ServiceAccountsControllerV2.getADServiceAccounts.value=To get list of service accounts from AD
ServiceAccountsControllerV2.getADServiceAccounts.notes=To get list of service accounts from AD

ServiceAccountsControllerV2.onboardServiceAccount.value=To onboard a service account into TVault for password rotation
ServiceAccountsControllerV2.onboardServiceAccount.notes=<b>Onboarding of service account into TVault for password rotation. </b><br>\
<b>name: </b>Name specified should be minimum 3 and maximum 60 characters only and the allowed characters for name are  alphabets, numbers, _ and - characters only. <br>\
<b>owner: </b>Owner can have alphabets, numbers, _ and - characters only.<br>\
<b>appName: </b>Application Name can not be null or empty.<br>\
<b>max_ttl: </b>max_ttl should be minimum 1 and maximum 1590897977L.<br>\
<b>ttl: </b>ttl should be minimum 1.<br>

ServiceAccountsControllerV2.addUserToServiceAccount.value=To add user to Service Account who can read/reset password
ServiceAccountsControllerV2.addUserToServiceAccount.notes=<b>To add user to Service Account who can read/reset password </b><br>\
<b>svcAccName: </b>Service Account Name specified should be minimum 3 characters only and the allowed characters for svcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>username: </b>Username can not be null or empty. This field contains the username for whom the permission is getting added<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, reset and deny.

ServiceAccountsControllerV2.removeUserServiceAccount.value=To remove user from Service Account who can read/reset password
ServiceAccountsControllerV2.removeUserServiceAccount.notes=<b>To remove user from Service Account who can read/reset password </b><br>\
<b>svcAccName: </b>Service Account Name specified should be minimum 3 characters only and the allowed characters for svcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>username: </b>Username can not be null or empty. This field contains the username for whom the permission are getting removed<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, reset and deny.

ServiceAccountsControllerV2.resetPassword.value=To reset Service Account Password
ServiceAccountsControllerV2.resetPassword.notes=To reset Service Account Password

ServiceAccountsControllerV2.offboardServiceAccount.value=To offboard a service account from TVault for password rotation
ServiceAccountsControllerV2.offboardServiceAccount.notes=<b>Offboard a service account from TVault for password rotation </b><br>\
<b>name: </b>Service Account Name specified should be minimum 3 characters only and the allowed characters for svcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>owner: </b>Owner can have alphabets, numbers, _ and - characters only<br>

ServiceAccountsControllerV2.getServiceAccounts.value=To get list of onboarded service accounts from TVault
ServiceAccountsControllerV2.getServiceAccounts.notes=To get list of onboarded service accounts from TVault

ServiceAccountsControllerV2.addGroupToServiceAccount.value=To add group to Service Account who can read/reset password
ServiceAccountsControllerV2.addGroupToServiceAccount.notes=<b>To add group to Service Account who can read/reset password </b><br>\
<b>svcAccName: </b>Service Account Name specified should be minimum 3 characters only and the allowed characters for svcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>groupname: </b>Group name can not be null or empty. This field contains the groupname for whom the permission is getting added<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, write and deny.

ServiceAccountsControllerV2.removeGroupFromServiceAccount.value=To remove group from Service Account who can read/reset password
ServiceAccountsControllerV2.removeGroupFromServiceAccount.notes=<b>To remove group from Service Account who can read/reset password </b><br>\
<b>svcAccName: </b>Service Account Name specified should be minimum 3 characters only and the allowed characters for svcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>groupname: </b>Group name can not be null or empty. This field contains the groupname for whom the permission are getting removed<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, write and deny.

ServiceAccountsControllerV2.getServiceAccountsMeta.value=To get metadata of service accounts
ServiceAccountsControllerV2.getServiceAccountsMeta.notes=To get metadata of service accounts

ServiceAccountsControllerV2.associateApprole.value=To associate an AppRole to a Service Account
ServiceAccountsControllerV2.associateApprole.notes=<b>To associate an AppRole to a Service Account </b><br>\
<b>svcAccName: </b>Service Account Name specified should be minimum 3 characters only and the allowed characters for svcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>approlename: </b>Approle name can not be null or empty. This field contains the approlename for whom the permission is getting added<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, write and deny.

ServiceAccountsControllerV2.removeApprole.value=To remove an AppRole from Service Account
ServiceAccountsControllerV2.removeApprole.notes=<b>To remove an AppRole from Service Account </b><br>\
<b>svcAccName: </b>Service Account Name specified should be minimum 3 characters only and the allowed characters for svcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>approlename: </b>Approle name can not be null or empty. This field contains the approlename for whom the permission are getting removed<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, write and deny.

ServiceAccountsControllerV2.addAWSRole.value=To add AWS role to a service account
ServiceAccountsControllerV2.addAWSRole.notes=<b>To add AWS role to a service account </b><br>\
<b>svcAccName: </b>Service Account Name specified should be minimum 3 characters only and the allowed characters for svcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>rolename: </b>Role name can not be null or empty. This field contains the rolename for whom the permission is getting added<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, write and deny.

ServiceAccountsControllerV2.removeAWSRole.value=To remove AWS role from service account
ServiceAccountsControllerV2.removeAWSRole.notes=<b>To remove AWS role from service account </b><br>\
<b>svcAccName: </b>Service Account Name specified should be minimum 3 characters only and the allowed characters for svcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>rolename: </b>Role name can not be null or empty. This field contains the rolename for whom the permission are getting removed<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, write and deny.

ServiceAccountsControllerV2.createAWSRole.value=To create an aws app role
ServiceAccountsControllerV2.createAWSRole.notes=To create an aws app role

ServiceAccountsControllerV2.createIamRole.value=To create an aws iam role
ServiceAccountsControllerV2.createIamRole.notes=To create an aws iam role

ServiceAccountsControllerV2.updateOnboardServiceAccount.value=To update onboarded service account
ServiceAccountsControllerV2.updateOnboardServiceAccount.notes=<b>Update onboarded service account </b><br>\
<b>name: </b>Name specified should be minimum 3 and maximum 60 characters only and the allowed characters for name are  alphabets, numbers, _ and - characters only. <br>\
<b>owner: </b>Owner can have alphabets, numbers, _ and - characters only.<br>\
<b>appName: </b>Application Name can not be null or empty.<br>\
<b>max_ttl: </b>max_ttl should be minimum 1 and maximum 1590897977L.<br>\
<b>ttl: </b>ttl should be minimum 1.<br>

ServiceAccountsControllerV2.readPassword.value=To read Service Account Password
ServiceAccountsControllerV2.readPassword.notes=To read Service Account Password

WorkloadDetailsController.getApprolesFromCwm.value=To get Application list from CWM api
WorkloadDetailsController.getApprolesFromCwm.notes=To get Application list from CWM api

ServiceAccountsControllerV2.transferSvcAccountOwner.value=To change service account owner
ServiceAccountsControllerV2.transferSvcAccountOwner.notes=<b> Change service account owner </b><br>\

ServiceAccountsControllerV2.getServiceAccountDetails.value=To get the details of onboarded service account
ServiceAccountsControllerV2.getServiceAccountDetails.notes=To get the details of onboarded service account

ServiceAccountsControllerV2.getServiceAccountsList.value=To get list of ad service accounts having read/reset permission
ServiceAccountsControllerV2.getServiceAccountsList.notes=To get list of ad service accounts having read/reset permission


SysControllerV2.checkSealStatus.value=To get vault seal status
SysControllerV2.checkSealStatus.notes=To get vault seal status

CertificateController.getTargetSystemList.value=To get target system list from NCLM
CertificateController.getTargetSystemList.notes=To get target system list from NCLM

CertificateController.getTargetSystemServiceList.value= To get target system service list from NCLM
CertificateController.getTargetSystemServiceList.notes= To get target system service list from NCLM

CertificateController.downloadCertificateWithPrivateKey.value=To download certificate with private key. This is a post api with file download. Login to T-Vault UI or use Postman to try this api.
CertificateController.downloadCertificateWithPrivateKey.notes=To download certificate with private key. This is a post api with file download. Login to T-Vault UI or use Postman to try this api.

CertificateController.downloadCertificate.value= To download certificate. This is a get api with file download. Login to T-Vault UI or use Postman to try this api.
CertificateController.downloadCertificate.notes= To download certificate. This is a get api with file download. Login to T-Vault UI or use Postman to try this api.

CertificateController.getCertificateDetails.value= To get certificate details.
CertificateController.getCertificateDetails.notes= To get certificate details.

sslcertmanager.domain=	
sslcertmanager.username=	
sslcertmanager.password=
sslcertmanager.endpoint.token_generator=token?grant_type=client_credentials
sslcertmanager.endpoint.search_certificate=certificates?freeText=
sslcertmanager.endpoint.certificate=certificates/
sslcertmanager.endpoint.target_system_groups=targetsystemgroups/
sslcertmanager.endpoint.targetsystems=targetsystems
sslcertmanager.endpoint.targetsystemservices=targetsystemservices
sslcertmanager.endpoint.enroll_config=enrollconfig
sslcertmanager.endpoint.enroll=enroll?entityId=entityid&entityRef=SERVICE
sslcertmanager.endpoint.status=status
sslcertmanager.endpoint.pkcs12_der=privatekeyexport
sslcertmanager.endpoint.renew=renew
sslcertmanager.endpoint.enrollCA=policy/ca?entityRef=SERVICE&entityId=entityid&allowedOnly=true&withTemplateById=0
sslcertmanager.endpoint.enrollTemplateUrl=policy/ca/caid/templates?entityRef=SERVICE&entityId=entityid&allowedOnly=true&withTemplateById=0
sslcertmanager.endpoint.enrollKeysUrl=policy/keytype?entityRef=SERVICE&entityId=entityid&allowedOnly=true&withTemplateById=templateId
sslcertmanager.endpoint.enrollCSRUrl=policy/csr?entityRef=SERVICE&entityId=entityid&allowedOnly=true&withTemplateById=templateId
sslcertmanager.endpoint.enrollUpdateCSRUrl=policy/csr?entityRef=SERVICE&entityId=entityid&allowedOnly=true&enroll=true
sslcertmanager.endpoint.getTemplateParamUrl=policy/template/templateId/parameters?entityRef=SERVICE&entityId=entityid&allowedOnly=true&withTemplateById=templateId
sslcertmanager.endpoint.putTemplateParamUrl=policy/template/templateId/parameters?entityRef=SERVICE&entityId=entityid&allowedOnly=true&enroll=true
sslcertmanager.endpoint.approvalUrl=actions/actionId/finalize
sslcertmanager.endpoint.findTargetSystem=targetsystemgroups/tsgid/targetsystems
sslcertmanager.endpoint.findTargetSystemService=targetsystems/tsgid/targetsystemservices
sslcertmanager.endpoint.findCertificate=certificates?freeText=certname&sortAttribute=createdAt&sortOrder=desc&containerId=cid
sslcertmanager.endpoint.getCertifcateReasons=certificates/certID/revocationreasons
sslcertmanager.endpoint.issueRevocationRequest=certificates/certID/revocationrequest
sslcertmanager.endpoint.requestStatusUrl=actions/actionid
sslcertmanager.endpoint.renewCertificate=certificates/certID/renew
sslcertmanager.endpoint.unassignCertificate=certificates/certID/services/assigned
sslcertmanager.endpoint.deleteCertificate=certificates/certID
sslcertmanager.endpoint.findAllCertificate=certificates?advanced=true&freeText=status:active AND container:"T-Vault-Test" AND renewed:false&limit=1000&stateCurrent=false&stateDeploying=false&stateWaiting=false&stateLastDeployed=false&stateAssigned=false&stateUnattached=false&expiresAfter=&expiresBefore=&sortAttribute=createdAt&sortOrder=desc&containerId=

sslcertmanager.targetsystemgroup.private_single_san.ts_gp_id=29
sslcertmanager.targetsystemgroup.private_multi_san.ts_gp_id=29
sslcertmanager.targetsystemgroup.public_single_san.ts_gp_id=75
sslcertmanager.targetsystemgroup.public_multi_san.ts_gp_id=99

certificate.retry.count=20
certificate.delay.time.millsec=1000
certificate.renew.delay.time.millsec=3000

SSLCertificateController.login.value=To authenticate against NCLM
SSLCertificateController.login.notes=To authenticate against NCLM
SSLCertificateController.sslcreate.value=SSL Certificate Creation in NCLM
SSLCertificateController.sslcreate.notes=<b>SSL Certificate Creation in NCLM. </b><br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>appName: </b>Owner can have alphabets, numbers, _ and - characters only.<br>\
<b>certOwnerEmailId: </b>Certificate owner email can not be null or empty.<br>\
<b>certType: </b>max_ttl should be minimum 1 and maximum 1590897977L.<br>\
<b>dnsList: </b>ttl should be minimum 1.<br>\
<b>notificationEmail: </b>ttl should be minimum 1.<br>

SSLCertificateController.getssl.value=Get SSl Certificates List from metadata 
SSLCertificateController.getssl.notes=Get SSl Certificates List from metadata
SSLCertificateController.getRevocationReasons.value=Get list of revocation reasons related to certificate
SSLCertificateController.getRevocationReasons.notes=Get list of revocation reasons related to certificate
SSLCertificateController.issueRevocationRequest.value=Issue a revocation request for certificate
SSLCertificateController.issueRevocationRequest.notes=Issue a revocation request for certificate
WorkloadDetailsController.getApprolesFromCwm.appname.value=To get Application list from CWM api by app name
WorkloadDetailsController.getApprolesFromCwm.appname.notes=To get Application list from CWM api by app name
SSLCertificateController.addUserToCertificate.value=To add a user to SSL Certificate
SSLCertificateController.addUserToCertificate.notes=<b>To add a user to SSL Certificate. </b><br>\
<b>username: </b>Username can not be null or empty. This field contains the username for whom the permission is getting added<br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certType: </b>Certificate Type value can be internal or external.<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, write and deny.

SSLCertificateController.certificatename.text=.t-mobile.com
SSLCertificateController.associateApproletoCertificate.value=To associate an AppRole to a Certificate
SSLCertificateController.associateApproletoCertificate.notes=<b>To associate an AppRole to a Certificate. </b><br>\
<b>approleName: </b>Approle name can not be null or empty. This field contains the approleName for whom the permission is getting added<br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certType: </b>Certificate Type value can be internal or external.<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, write and deny.

SSLCertificateController.renewCertificate.value=To Renew a certificate
SSLCertificateController.renewCertificate.notes=To Renew a certificate 
SSLCertificateController.removeGroupFromCertificate.value=To remove a group from SSL Certificate
SSLCertificateController.removeGroupFromCertificate.notes=<b>To remove a group from SSL Certificate. </b><br>\
<b>groupname: </b>Group name can not be null or empty. This field contains the groupname for whom the permission are getting removed<br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certType: </b>Certificate Type value can be internal or external.<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, write and deny.

SSLCertificateController.removeUserFromCertificate.value=To remove a user from SSL Certificate
SSLCertificateController.removeUserFromCertificate.notes=<b>To remove a user from SSL Certificate. </b><br>\
<b>username: </b>Username can not be null or empty. This field contains the username for whom the permission are getting removed<br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certType: </b>Certificate Type value can be internal or external.<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, write and deny.

SSLCertificateController.addGroupToCertificate.value=To add a group to SSL Certificate
SSLCertificateController.addGroupToCertificate.notes=<b>To add a group to SSL Certificate. </b><br>\
<b>groupname: </b>Group name can not be null or empty. This field contains the groupname for whom the permission is getting added<br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certType: </b>Certificate Type value can be internal or external.<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, write and deny.
SSLCertificateController.getListOfCertificates.value=Get list of certificates by certificate type for admin
SSLCertificateController.getListOfCertificates.notes=Get list of certificates by certificate type for admin
SSLCertificateController.getCertificateDetails.value=Get Certificate detail
SSLCertificateController.getCertificateDetails.notes=Get Certificate detail
sslcertmanager.external.certificate.lifetime=1
sslcertmanager.external.certificate.telephonenumber =111-111-1111
sslcertmanager.external.certificate.requester.name=
sslcertmanager.external.certificate.requester.email=
SSLCertificateController.validateCertificateDetails.value=To validate and get the status of external certificate from nclm
SSLCertificateController.validateCertificateDetails.notes=To validate and get the status of external certificate from nclm
SSLCertificateController.transferCertificateOwner.value=Transfer the certificate ownership
SSLCertificateController.transferCertificateOwner.notes=Transfer the certificate ownership
SSLCertificateController.deleteCertificate.value=To delete certificate and metadata
SSLCertificateController.deleteCertificate.notes=To delete certificate and metadata
SSLCertificateController.getAllCertificates.value=To Get Internal and External certificates metadata details for admin and approle token
SSLCertificateController.getAllCertificates.notes=To Get Internal and External certificates metadata details for admin and approle token

OidcAuthControllerV2.getAuthUrl.value=To get oidc auth url
OidcAuthControllerV2.getAuthUrl.notes=To get oidc auth url

OidcAuthControllerV2.processOIDCCallback.value=To process oidc callback and get vault client token
OidcAuthControllerV2.processOIDCCallback.notes=To process oidc callback and get vault client token

sso.azure.resourceendpoint=https://graph.microsoft.com/
sso.azure.groupsendpoint=https://graph.microsoft.com/v1.0/groups?
sso.azure.userendpoint=https://graph.microsoft.com/v1.0/users/
sso.azure.usergroups=/memberOf?$select=displayName&$top=999
sso.admin.groupName.Pattern=r_selfservice_[a-z]{3}_admin

SSLCertificateController.sprintmail.text=sprint.com

OIDCAuthController.getIdentityGroupDetails.value=To get identity group details.
OIDCAuthController.getIdentityGroupDetails.notes=To get identity group details.

OIDCAuthController.searchGroupsInAzure.value=To search groups in AAD
OIDCAuthController.searchGroupsInAzure.notes=To search groups in AAD

SSLCertificateController.checkstatus.value=check if  the certificate is revoked in NCLM
SSLCertificateController.checkstatus.notes= check if  the certificate is revoked in NCLM

nclm.service.down.message=Your request cannot be processed now due to some technical issue. Please try again later.
nclm.mock=false

SSLCertificateController.onboardcert.value=Bulk onboard certificates from NCLM to Tvault
SSLCertificateController.onboardcert.notes= Bulk onboard certificates from NCLM to Tvault
SSLCertificateController.onboardsinglecert.value=onboard single certificate from NCLM to Tvault
SSLCertificateController.onboardsinglecert.notes=onboard single certificate from NCLM to Tvault

sslcertmanager.container_name=T-Vault-Test
sslcertmanager.targetsystemgroup.private_single_san.ts_gp_id_test=2275
sslcertmanager.targetsystemgroup.private_multi_san.ts_gp_id_test=2275
sslcertmanager.targetsystemgroup.public_single_san.ts_gp_id_test=2276
sslcertmanager.targetsystemgroup.public_multi_san.ts_gp_id_test=2277

pacbot.endpoint.getToken=
pacbot.endpoint.getallcertificates=
pacbot.client.id=
pacbot.client.secret=

IAMServiceAccountsController.addUserToIAMServiceAccount.value=To add user to IAM service account
IAMServiceAccountsController.addUserToIAMServiceAccount.notes=<b>To add user to IAM service account. </b><br>\
<b>iamSvcAccName: </b>IAM Service Account Name specified should be minimum 11 characters only and the allowed characters for iamSvcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>awsAccountId: </b>AWSAccountId specified should be maximum 12 characters and allowed characters are from 0 to 9 only.<br>\
<b>username: </b>Username can not be null or empty. This field contains the username for whom the permission is getting added<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, rotate and deny.
IAMServiceAccountsController.rotateIAMServiceAccountCreds.value=To rotate IAM service account secret
IAMServiceAccountsController.rotateIAMServiceAccountCreds.notes=<b>Rotate IAM service account secret for an access key. </b><br>\
<b>accessKeyId: </b>AccessKeyID  can not be null or empty. <br>\
<b>accountId: </b>AWSAccountId specified should be maximum 12 characters and allowed characters are from 0 to 9 only<br>\
<b>userName: </b>Username can not be null or empty.
IAMServiceAccountsController.activateIAMServiceAccount.value=To activate IAM service account
IAMServiceAccountsController.activateIAMServiceAccount.notes=<b>Activate IAM service account, this will generate secrets for the IAM service account. </b>
IAMServiceAccountsController.onboardIAMServiceAccount.value=To onboard a IAM Service Account into TVault
IAMServiceAccountsController.onboardIAMServiceAccount.notes=<b>Onboarding of IAM Service Account into TVault can be done for only those users who have iamportal_master_approle permissions. </b><br>\
<b>userName: </b>UserName specified should be minimum 11 characters only and the allowed characters for UserName are  alphabets, numbers, _ and - characters only. <br>\
<b>awsAccountId: </b>AWSAccountId specified should be maximum 12 characters and allowed characters are from 0 to 9 only.<br>\
<b>awsAccountName: </b>AWSAccountName specified should be minimum 1 characters and maximum 50 characters only and the allowed characters for AWSAccountName are alphabets, numbers, _ and - characters only.<br>\
<b>owner_ntid: </b>Owner NTID can have alphabets, numbers, _ and - characters only.<br>\
<b>owner_email: </b>Owner Email can not be null or empty and should be in a proper email format. Example :- abc.t-mobile.com<br>\
<b>application_id: </b>Application Id can not be null or empty.<br>\
<b>application_name: </b>Application Name can not be null or empty.<br>\
<b>application_tag: </b>Application Tag can not be null or empty.<br>\
<b>accessKeyId: </b>AccessKeyId specified should be minimum 16 characters and maximum 128 characters only.<br>\
<b>expiryDuration: </b>.The value should be provided in millseconds and it should be between 7 days and 90 dayz. Example :- 604800000L - 7776000000L 
IAMServiceAccountsController.removeUserFromIAMServiceAccount.value=To remove a user from IAM Service Account
IAMServiceAccountsController.removeUserFromIAMServiceAccount.notes=<b>To remove a user from IAM Service Account. </b><br>\
<b>iamSvcAccName: </b>IAM Service Account Name specified should be minimum 11 characters only and the allowed characters for iamSvcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>awsAccountId: </b>AWSAccountId specified should be maximum 12 characters and allowed characters are from 0 to 9 only.<br>\
<b>username: </b>Username can not be null or empty. This field contains the username for whom the permission is getting removed<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, rotate and deny.
IAMServiceAccountsController.addGroupToIAMServiceAccount.value=To add a group to IAM Service Account
IAMServiceAccountsController.addGroupToIAMServiceAccount.notes=<b>To add a group to IAM Service Account. </b><br>\
<b>iamSvcAccName: </b>IAM Service Account Name specified should be minimum 11 characters only and the allowed characters for iamSvcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>awsAccountId: </b>AWSAccountId specified should be maximum 12 characters and allowed characters are from 0 to 9 only.<br>\
<b>groupname: </b>Group name can not be null or empty. This field contains the group name for which the permission is getting added<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, rotate and deny.
IAMServiceAccountsController.removeGroupFromIAMServiceAccount.value=To remove a group from IAM Service Account
IAMServiceAccountsController.removeGroupFromIAMServiceAccount.notes=<b>To remove a group from IAM Service Account. </b><br>\
<b>iamSvcAccName: </b>IAM Service Account Name specified should be minimum 11 characters only and the allowed characters for iamSvcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>awsAccountId: </b>AWSAccountId specified should be maximum 12 characters and allowed characters are from 0 to 9 only.<br>\
<b>groupname: </b>Group name can not be null or empty. This field contains the group name for which the permission is getting removed<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, rotate and deny.
IAMServiceAccountsController.getOnboardedIAMServiceAccounts.value=To get list of onboarded IAM service accounts from TVault
IAMServiceAccountsController.getOnboardedIAMServiceAccounts.notes=To get list of onboarded IAM service accounts from TVault
IAMServiceAccountsController.getIAMServiceAccountsList.value=To get list of IAM service accounts having read/reset/deny permission
IAMServiceAccountsController.getIAMServiceAccountsList.notes=To get list of IAM service accounts having read/reset/deny permission
IAMServiceAccountsController.getIAMServiceAccountDetail.value=To get metadata of IAM service accounts
IAMServiceAccountsController.getIAMServiceAccountDetail.notes=To get metadata of IAM service accounts
IAMServiceAccountsController.getIAMServiceAccountSecretKey.value=To get secretkey/accesskey of IAM service accounts
IAMServiceAccountsController.getIAMServiceAccountSecretKey.notes=To get secretkey/accesskey of IAM service accounts
IAMServiceAccountsController.readFolders.value=To get folders of IAM service accounts
IAMServiceAccountsController.readFolders.notes=To get folders of IAM service accounts
IAMServiceAccountsController.associateApproletoIAMSvcAcc.value=To associate an AppRole to an IAM service accounts
IAMServiceAccountsController.associateApproletoIAMSvcAcc.notes=<b>To associate an AppRole to an IAM service accounts. </b><br>\
<b>iamSvcAccName: </b>IAM Service Account Name specified should be minimum 11 characters only and the allowed characters for iamSvcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>awsAccountId: </b>AWSAccountId specified should be maximum 12 characters and allowed characters are from 0 to 9 only.<br>\
<b>approlename: </b>Approle name can not be null or empty. This field contains the approle for which the permission is getting added<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, rotate and deny.
IAMServiceAccountsController.removeApproleFromIAMSvcAcc.value=To remove an AppRole from an IAM service account
IAMServiceAccountsController.removeApproleFromIAMSvcAcc.notes=<b>To remove an AppRole from an IAM service account. </b><br>\
<b>iamSvcAccName: </b>IAM Service Account Name specified should be minimum 11 characters only and the allowed characters for iamSvcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>awsAccountId: </b>AWSAccountId specified should be maximum 12 characters and allowed characters are from 0 to 9 only.<br>\
<b>approlename: </b>Approle name can not be null or empty. This field contains the approle for which the permission is getting removed<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, rotate and deny.
IAMServiceAccountsController.readSecrets.value=Read access key secrets from access key for an IAM service account
IAMServiceAccountsController.readSecrets.notes=Read access key secrets from access key for an IAM service account
IAMServiceAccountsController.offboardIAMServiceAccount.value=To offboard IAM Service account
IAMServiceAccountsController.offboardIAMServiceAccount.notes=<b>Offboarding of IAM Service Account into TVault can be done for only those users who have iamportal_master_approle permissions. </b><br>\
<b>iamSvcAccName: </b>IAM Service Account Name specified should be minimum 11 characters only and the allowed characters for iamSvcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>awsAccountId: </b>AWSAccountId specified should be maximum 12 characters and allowed characters are from 0 to 9 only.<br>
IAMServiceAccountsController.createAWSRole.value=To create an aws ec2 role
IAMServiceAccountsController.createAWSRole.notes=To create an aws ec2 role
IAMServiceAccountsController.createIamRole.value=To create an aws iam role
IAMServiceAccountsController.createIamRole.notes=To create an aws iam role
IAMServiceAccountsController.addAwsRoleToIAMSvcacc.value=To add AWS role to an IAM service account
IAMServiceAccountsController.addAwsRoleToIAMSvcacc.notes=<b>To add AWS role to an IAM service account. </b><br>\
<b>iamSvcAccName: </b>IAM Service Account Name specified should be minimum 11 characters only and the allowed characters for iamSvcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>awsAccountId: </b>AWSAccountId specified should be maximum 12 characters and allowed characters are from 0 to 9 only.<br>\
<b>rolename: </b>AWS role name can not be null or empty. This field contains the aws role for which the permission is getting added<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, rotate and deny.
IAMServiceAccountsController.removeAWSRoleFromIAMSvcacc.value=To remove AWS role from an IAM service account
IAMServiceAccountsController.removeAWSRoleFromIAMSvcacc.notes=<b>To remove AWS role from an IAM service account. </b><br>\
<b>iamSvcAccName: </b>IAM Service Account Name specified should be minimum 11 characters only and the allowed characters for iamSvcAccName are  alphabets, numbers, _ and - characters only. <br>\
<b>awsAccountId: </b>AWSAccountId specified should be maximum 12 characters and allowed characters are from 0 to 9 only.<br>\
<b>rolename: </b>AWS role name can not be null or empty. This field contains the aws role for which the permission is getting removed<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, rotate and deny.

iamPortal.domain=
iamPortal.secret.endpoint=
iamPortal.auth.endpoint=
iamPortal.auth.masterPolicy=
azurePortal.auth.masterPolicy=

DirectoryServiceControllerV2.searchByDisplayName.value=To search users by displayName or NTTd
DirectoryServiceControllerV2.searchByDisplayName.notes=To search users by displayName or NTTd
DirectoryServiceControllerV2.getAllUsersDetailByNtIds.value=To get users detail by NTTds
DirectoryServiceControllerV2.getAllUsersDetailByNtIds.notes=To get users detail by NTTds

SSLCertificateController.addAwsRoleToSSLCertificate.value=To add AWS role to a certificate
SSLCertificateController.addAwsRoleToSSLCertificate.notes=<b>To add AWS role to a certificate.  </b><br>\
<b>rolename: </b>Role name can not be null or empty. This field contains the rolename for whom the permission is getting added<br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certType: </b>Certificate Type value can be internal or external.<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, write and deny.
SSLCertificateController.removeAWSRoleFromSSLCertificate.value=To remove AWS role from certificate
SSLCertificateController.removeAWSRoleFromSSLCertificate.notes=<b>To remove AWS role from certificate. </b><br>\
<b>rolename: </b>Role name can not be null or empty. This field contains the rolename for whom the permission are getting removed<br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certType: </b>Certificate Type value can be internal or external.<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, write and deny.
SSLCertificateController.createAWSRoleForSSL.value=To create an AWS role for certificate
SSLCertificateController.createAWSRoleForSSL.notes=To create an AWS role for certificate
SSLCertificateController.createIAMRoleForSSL.value=To create an AWS IAM role for certificate
SSLCertificateController.createIAMRoleForSSL.notes=To create an AWS IAM role for certificate
DirectoryServiceControllerV2.searchByEmailInCorpAD.value=To search email in CORP AD
DirectoryServiceControllerV2.searchByEmailInCorpAD.notes=To search email in CORP AD
SSLCertificateController.deleteApproleFromCertificate.value=To Remove Approle from SSL certificate
SSLCertificateController.deleteApproleFromCertificate.notes=<b>To Remove Approle from SSL certificate. </b><br>\
<b>approleName: </b>Approle name can not be null or empty. This field contains the approleName for whom the permission are getting removed<br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>certType: </b>Certificate Type value can be internal or external.<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, write and deny.

SSLCertificateController.unlinkCertificate.notes=Delete metadata , policies  and permissions for selected certificate from application
SSLCertificateController.unlinkCertificate.value=Unlink certificate from  application
SSLCertificateController.getAllOnboardPendingCertificates.value=Get all onboard pending certificates from nclm
SSLCertificateController.getAllOnboardPendingCertificates.notes=Get all onboard pending certificates from nclm
SSLCertificateController.onboardSSLCertificate.value=To onboard single NCLM certificate to tvault
SSLCertificateController.onboardSSLCertificate.notes=<b>Onboard single NCLM certificate to tvault. </b><br>\
<b>certificateName: </b>Certificate Name can have alphabets, numbers, . and - characters only. <br>\
<b>appName: </b>Owner can have alphabets, numbers, _ and - characters only.<br>\
<b>certOwnerEmailId: </b>Certificate owner email can not be null or empty.<br>\
<b>certType: </b>max_ttl should be minimum 1 and maximum 1590897977L.<br>\
<b>dnsList: </b>ttl should be minimum 1.<br>\
<b>notificationEmail: </b>ttl should be minimum 1.<br>

SSLCertificateController.ssledit.value=To update the metadata details for an ssl certificate
SSLCertificateController.ssledit.notes=To update the metadata details for an ssl certificate

AzureServicePrincipalAccountsController.onboardAzureServiceAccount.value=To onboard Azure service principal into TVault
AzureServicePrincipalAccountsController.onboardAzureServiceAccount.notes=<b>Onboarding of Azure service principal into TVault can be done for only those users who have azure_master_approle permissions. </b><br>\
<b>servicePrincipalName: </b>Azure service principal name specified should be minimum 11 characters only and the allowed characters for servicePrincipalName are  alphabets, numbers, _ and - characters only. <br>\
<b>servicePrincipalId: </b>ServicePrincipalId specified should be minimum 10 characters and maximum 128 characters only<br>\
<b>servicePrincipalClientId: </b>ServicePrincipalClientId specified should be minimum 10 characters and maximum 128 characters only.<br>\
<b>tenantId: </b>TenantId specified should be minimum 10 characters and maximum 128 characters only.<br>\
<b>owner_ntid: </b>Owner NTID can have alphabets, numbers, _ and - characters only.<br>\
<b>owner_email: </b>Owner Email can not be null or empty and should be in a proper email format. Example :- abc.t-mobile.com<br>\
<b>application_id: </b>Application Id can not be null or empty.<br>\
<b>application_name: </b>Application Name can not be null or empty.<br>\
<b>application_tag: </b>Application Tag can not be null or empty.<br>\
<b>createdAtEpoch: </b>Created ate Epoch can not be null or empty.<br>\
<b>secretKeyId: </b>SecretKeyId specified should be minimum 10 characters and maximum 128 characters only.<br>\
<b>expiryDuration: </b>.The value should be provided in millseconds and it should be between 7 days and 90 dayz. Example :- 604800000L - 7776000000L AzureServicePrincipalAccountsController.getAzureServicePrincipalList.value=To get list of Azure service principal having read/reset/deny permission
AzureServicePrincipalAccountsController.getAzureServicePrincipalList.notes=To get list of Azure service principal having read/reset/deny permission
AzureServicePrincipalAccountsController.readSecret.value=Read secret from secret key for an Azure service principal
AzureServicePrincipalAccountsController.readSecret.notes=Read secret from secret key for an Azure service principal
AzureServicePrincipalAccountsController.offboardAzureServiceAccount.value=To offboard Azure Service principal
AzureServicePrincipalAccountsController.offboardAzureServiceAccount.notes=<b>Offboarding of Azure service principal into TVault can be done for only those users who have azure_master_approle permissions. </b><br>\
<b>azureSvcAccName: </b>Azure service principal name can not be null or empty.
AzureServicePrincipalAccountsController.getOnboardedAsureServicePrincipal.value=Gets the list of azure service principal onboarded
AzureServicePrincipalAccountsController.getOnboardedAsureServicePrincipal.notes=Gets the list of azure service principal onboarded
AzureServicePrincipalAccountsController.removeUserFromAzureServiceAccount.value=To remove a user from Azure service principal
AzureServicePrincipalAccountsController.removeUserFromAzureServiceAccount.notes=<b>To remove a user from Azure service principal. </b><br>\ 
<b>azureSvcAccName: </b>Azure service principal name specified should be minimum 11 characters only and the allowed characters for servicePrincipalName are  alphabets, numbers, _ and - characters only. <br>\
<b>username: </b>Username can not be null or empty. This field contains the username for whom the permission is getting removed<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, rotate and deny.
AzureServicePrincipalAccountsController.createAWSRole.value=To create an aws ec2 role
AzureServicePrincipalAccountsController.createAWSRole.notes=To create an aws ec2 role
AzureServicePrincipalAccountsController.createIamRole.value=To create an aws iam role
AzureServicePrincipalAccountsController.createIamRole.notes=To create an aws iam role
AzureServicePrincipalAccountsController.addAwsRoleToAzureSvcacc.value=To add AWS role to an Azure service principal
AzureServicePrincipalAccountsController.addAwsRoleToAzureSvcacc.notes=<b>Add AWS role to an Azure service principal. </b><br>\
<b>azureSvcAccName: </b>Azure service principal name specified should be minimum 11 characters only and the allowed characters for servicePrincipalName are  alphabets, numbers, _ and - characters only. <br>\
<b>rolename: </b>AWS role name can not be null or empty. This field contains the aws role for which the permission is getting added<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, rotate and deny.
AzureServicePrincipalAccountsController.addUserToAzureServicePrincipal.value=To add user to Azure service principal
AzureServicePrincipalAccountsController.addUserToAzureServicePrincipal.notes=<b>Add user to Azure service principal. </b><br>\
<b>azureSvcAccName: </b>Azure service principal name specified should be minimum 11 characters only and the allowed characters for servicePrincipalName are  alphabets, numbers, _ and - characters only. <br>\
<b>username: </b>Username can not be null or empty. This field contains the username for whom the permission is getting added<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, rotate and deny.
AzureServicePrincipalAccountsController.addGroupToAzureServiceAccount.value=To add group to Azure service principal
AzureServicePrincipalAccountsController.addGroupToAzureServiceAccount.notes=<b>Add group to Azure service principal. </b><br>\
<b>azureSvcAccName: </b>Azure service principal name specified should be minimum 11 characters only and the allowed characters for servicePrincipalName are  alphabets, numbers, _ and - characters only. <br>\
<b>groupname: </b>Groupname can not be null or empty. This field contains the group name for whom the permission is getting added<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, rotate and deny.
AzureServicePrincipalAccountsController.getAzureServicePrincipalDetail.value=To get metadata of Azure service principal
AzureServicePrincipalAccountsController.getAzureServicePrincipalDetail.notes=To get metadata of Azure service principal

ServiceAccountsControllerV2.offboarddecommissioned.value=To offboard decommissioned service account
ServiceAccountsControllerV2.offboarddecommissioned.notes=To offboard decommissioned service account

azurePortal.secret.endpoint=/app/servicePrincipals/secret
AzureServicePrincipalAccountsController.activateAzureServicePrincipal.value=To Activate Azure Service Principal
AzureServicePrincipalAccountsController.activateAzureServicePrincipal.notes=<b>Activate Azure Service Principal, this will generate secrets for the Azure Service Principal. </b>
AzureServicePrincipalAccountsController.rotateSecret.value=To rotate Azure Service Principal secret
AzureServicePrincipalAccountsController.rotateSecret.notes=<b>Rotate Azure Service Principal secret for a secret key. </b><br>\
<b>azureSvcAccName: </b>Azure service principal name specified should be minimum 11 characters only and the allowed characters for servicePrincipalName are  alphabets, numbers, _ and - characters only. <br>\
<b>secretKeyId: </b>SecretKeyID  can not be null or empty. <br>\
<b>servicePrincipalId: </b>ServicePrincipalId specified should be minimum 10 chanracters and maximum 128 characters only<br>\
<b>tenantId: </b>TenantId specified should be minimum 10 chanracters and maximum 128 characters only.
AzureServicePrincipalAccountsController.removeAwsRoleToAzureSvcacc.value=To remove an aws role from Azure service principal 
AzureServicePrincipalAccountsController.removeAwsRoleToAzureSvcacc.notes=<b>Remove an aws role from Azure service principal.  </b><br>\
<b>azureSvcAccName: </b>Azure service principal name specified should be minimum 11 characters only and the allowed characters for servicePrincipalName are  alphabets, numbers, _ and - characters only. <br>\
<b>rolename: </b>AWS role name can not be null or empty. This field contains the aws role for which the permission are getting removed<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, rotate and deny.
AzureServicePrincipalAccountsController.removeGroupFromAzureServiceAccount.value=To remove a group from Azure service principal
AzureServicePrincipalAccountsController.removeGroupFromAzureServiceAccount.notes=<b>Remove a group from Azure service principal. </b><br>\
<b>azureSvcAccName: </b>Azure service principal name specified should be minimum 11 characters only and the allowed characters for servicePrincipalName are  alphabets, numbers, _ and - characters only. <br>\
<b>groupname: </b>Groupname can not be null or empty. This field contains the group name for whom the permission are getting removed<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, rotate and deny.
AzureServicePrincipalAccountsController.associateApproletoAzureServiceAccount.value=To associate an AppRole to an Azure service principal
AzureServicePrincipalAccountsController.associateApproletoAzureServiceAccount.notes=<b>Associate an AppRole to an Azure service principal. </b><br>\
<b>azureSvcAccName: </b>Azure service principal name specified should be minimum 11 characters only and the allowed characters for servicePrincipalName are  alphabets, numbers, _ and - characters only. <br>\
<b>approlename: </b>Approle name can not be null or empty. This field contains the approle for which the permission is getting added<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, rotate and deny.

SelfSupportController.transferSafe.value=To transfer safe ownership to a user
SelfSupportController.transferSafe.notes=To transfer safe ownership to a user

DirectoryServiceControllerV2.searchByUPNInGsmAndCorp.value=To search user in GSM and Corp
DirectoryServiceControllerV2.searchByUPNInGsmAndCorp.notes=To search user in GSM and Corp

AzureServicePrincipalAccountsController.removeApproleFromAzureSvcAcc.value=To remove an AppRole from Azure service principal
AzureServicePrincipalAccountsController.removeApproleFromAzureSvcAcc.notes=<b>Remove an AppRole from Azure service principal. </b><br>\
<b>azureSvcAccName: </b>Azure service principal name specified should be minimum 11 characters only and the allowed characters for servicePrincipalName are  alphabets, numbers, _ and - characters only. <br>\
<b>approlename: </b>Approle name can not be null or empty. This field contains the approle for which the permission is getting removed<br>\
<b>access: </b>Access can not be null or empty. Access can have values read, rotate and deny.

